{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programmation 1 - C\u00e9gep de Victoriaville Enseignant Fr\u00e9d\u00e9rik Taleb Github Classroom Se connecter avec votre adresse @etudiant.cegepvicto.ca Lien pour Github Classroom Horaire Groupe 1 Lundi : C-211 8h15 \u00e0 10h05 Mardi : C-211 10h15 \u00e0 12h05 Vendredi : C-205 13h15 \u00e0 15h05 Groupe 2 Lundi : C-211 10h15 \u00e0 12h05 Mardi : C-211 15h15 \u00e0 17h05 Vendredi : C-205 8h15 \u00e0 10h05 Planification de la session En construction","title":"Accueil"},{"location":"#programmation-1-cegep-de-victoriaville","text":"","title":"Programmation 1 - C\u00e9gep de Victoriaville"},{"location":"#enseignant","text":"Fr\u00e9d\u00e9rik Taleb","title":"Enseignant"},{"location":"#github-classroom","text":"Se connecter avec votre adresse @etudiant.cegepvicto.ca Lien pour Github Classroom","title":"Github Classroom"},{"location":"#horaire","text":"Groupe 1 Lundi : C-211 8h15 \u00e0 10h05 Mardi : C-211 10h15 \u00e0 12h05 Vendredi : C-205 13h15 \u00e0 15h05 Groupe 2 Lundi : C-211 10h15 \u00e0 12h05 Mardi : C-211 15h15 \u00e0 17h05 Vendredi : C-205 8h15 \u00e0 10h05","title":"Horaire"},{"location":"#planification-de-la-session","text":"En construction","title":"Planification de la session"},{"location":"exSem1/","text":"Exercices de la semaine 1 1. Aire et p\u00e9rim\u00e8tre du rectangle Cr\u00e9er un programme qui demande \u00e0 l'utilisateur la longueur et la largeur d'un rectangle Calculer l'aire et le p\u00e9rim\u00e8tre du rectangle Afficher l'aire et le p\u00e9rim\u00e8tre \u00e0 la console Formules 2. Conversion de Bitcoin Cr\u00e9er un programme qui demande \u00e0 l'utilisateur combien il poss\u00e8de de Bitcoin et affiche la valeur en dollars canadiens. 1 Bitcoin = 62315.32$ CAD pour les besoin du cours 3. Salaire brut Cr\u00e9er un programme qui calcul le salaire brut d'un employ\u00e9 pour l'ann\u00e9e L'utilisateur entre le nombre d'heures effectu\u00e9es par semaine et son taux horaire Afficher le r\u00e9sultat 4. Permutation (swap) Une technique tr\u00e8s utilis\u00e9e dans les algorithme de tri est d'\u00e9changer la valeur entre 2 variables. Par habitude, convention, paresse ou anglicisme, on appelle cette op\u00e9ration swap. Cr\u00e9er un programme qui lit deux nombres \u00e0 la console et les assigne chacun \u00e0 leur variable \u00c9changer le contenu des deux variables : a contient 3 et b contient -15 devient a contient -15 et b contient 3 Afficher la valeur de a et b 5. Le plus grand Cr\u00e9er un programme qui lit 2 nombres et affiche le plus grand des 2. 6. Pokemon Cr\u00e9er un programme qui calcule la force et l\u2019agilit\u00e9 d\u2019un personnage en fonction de son type. Les valeurs de d\u00e9part sont de 100 points pour les deux caract\u00e9ristiques. Si l\u2019utilisateur choisit le type feu, le personnage a 10% de plus de force, mais 15% de moins d\u2019agilit\u00e9. Si l\u2019utilisateur choisit le type eau, son personnage a 10% de moins de force, mais 15% de plus d\u2019agilit\u00e9. 7. Exposant Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nombre et l'exposant \u00e0 appliquer (ex: 2^4) Si l'exposant est 0 le r\u00e9sultat est toujours 1 Si l'exposant est 1 le r\u00e9sultat est le nombre entr\u00e9 par l'utilisateur Si l'exposant est 2 on calcul le nombre au carr\u00e9 avec les op\u00e9rations arithm\u00e9tiques Si l'exposant est 3 on calcul le nombre au cube comme au point pr\u00e9c\u00e9dent Si l'exposant est plus grand que 3 on affiche : \"Attends un peu, je vais voir les boucles la semaine prochaine\" sinon on affiche le r\u00e9sultat","title":"Semaine 1"},{"location":"exSem1/#exercices-de-la-semaine-1","text":"","title":"Exercices de la semaine 1"},{"location":"exSem1/#1-aire-et-perimetre-du-rectangle","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur la longueur et la largeur d'un rectangle Calculer l'aire et le p\u00e9rim\u00e8tre du rectangle Afficher l'aire et le p\u00e9rim\u00e8tre \u00e0 la console Formules","title":"1. Aire et p\u00e9rim\u00e8tre du rectangle"},{"location":"exSem1/#2-conversion-de-bitcoin","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur combien il poss\u00e8de de Bitcoin et affiche la valeur en dollars canadiens. 1 Bitcoin = 62315.32$ CAD pour les besoin du cours","title":"2. Conversion de Bitcoin"},{"location":"exSem1/#3-salaire-brut","text":"Cr\u00e9er un programme qui calcul le salaire brut d'un employ\u00e9 pour l'ann\u00e9e L'utilisateur entre le nombre d'heures effectu\u00e9es par semaine et son taux horaire Afficher le r\u00e9sultat","title":"3. Salaire brut"},{"location":"exSem1/#4-permutation-swap","text":"Une technique tr\u00e8s utilis\u00e9e dans les algorithme de tri est d'\u00e9changer la valeur entre 2 variables. Par habitude, convention, paresse ou anglicisme, on appelle cette op\u00e9ration swap. Cr\u00e9er un programme qui lit deux nombres \u00e0 la console et les assigne chacun \u00e0 leur variable \u00c9changer le contenu des deux variables : a contient 3 et b contient -15 devient a contient -15 et b contient 3 Afficher la valeur de a et b","title":"4. Permutation (swap)"},{"location":"exSem1/#5-le-plus-grand","text":"Cr\u00e9er un programme qui lit 2 nombres et affiche le plus grand des 2.","title":"5. Le plus grand"},{"location":"exSem1/#6-pokemon","text":"Cr\u00e9er un programme qui calcule la force et l\u2019agilit\u00e9 d\u2019un personnage en fonction de son type. Les valeurs de d\u00e9part sont de 100 points pour les deux caract\u00e9ristiques. Si l\u2019utilisateur choisit le type feu, le personnage a 10% de plus de force, mais 15% de moins d\u2019agilit\u00e9. Si l\u2019utilisateur choisit le type eau, son personnage a 10% de moins de force, mais 15% de plus d\u2019agilit\u00e9.","title":"6. Pokemon"},{"location":"exSem1/#7-exposant","text":"Cr\u00e9er un programme qui demande \u00e0 l'utilisateur un nombre et l'exposant \u00e0 appliquer (ex: 2^4) Si l'exposant est 0 le r\u00e9sultat est toujours 1 Si l'exposant est 1 le r\u00e9sultat est le nombre entr\u00e9 par l'utilisateur Si l'exposant est 2 on calcul le nombre au carr\u00e9 avec les op\u00e9rations arithm\u00e9tiques Si l'exposant est 3 on calcul le nombre au cube comme au point pr\u00e9c\u00e9dent Si l'exposant est plus grand que 3 on affiche : \"Attends un peu, je vais voir les boucles la semaine prochaine\" sinon on affiche le r\u00e9sultat","title":"7. Exposant"},{"location":"lecture-ecriture/","text":"Lecture et \u00e9criture Affichage \u00e0 la console Console.WriteLine() // Afficher une phrase directement Console.WriteLine(\"Voici ma phrase\"); // Afficher le contenu d'une variable, m\u00eame si c'est autre chose qu'une phrase Console.WriteLine(maVariable); // Afficher une combinaison de variables et de phrases Console.WriteLine(\"Je crois que ma variable contient : \" + maVariable + \" un entier positif\" ); Lecture \u00e0 la console La m\u00e9thode Console.ReadLine() lit une entr\u00e9e de l'utilisateur \u00e0 la console mais il faut assigner le r\u00e9sultat \u00e0 une variable pour l'utiliser. Cette m\u00e9thode nous donne toujours un string Si on veut lire autre chose, il faudra le convertir dans le bon type par la suite! string valeurSaisie = \"\"; int valeur = 0; valeurSaisie = Console.ReadLine(); int.TryParse(valeurSaisie, out valeur);","title":"Lecture et \u00e9criture"},{"location":"lecture-ecriture/#lecture-et-ecriture","text":"","title":"Lecture et \u00e9criture"},{"location":"lecture-ecriture/#affichage-a-la-console","text":"Console.WriteLine() // Afficher une phrase directement Console.WriteLine(\"Voici ma phrase\"); // Afficher le contenu d'une variable, m\u00eame si c'est autre chose qu'une phrase Console.WriteLine(maVariable); // Afficher une combinaison de variables et de phrases Console.WriteLine(\"Je crois que ma variable contient : \" + maVariable + \" un entier positif\" );","title":"Affichage \u00e0 la console"},{"location":"lecture-ecriture/#lecture-a-la-console","text":"La m\u00e9thode Console.ReadLine() lit une entr\u00e9e de l'utilisateur \u00e0 la console mais il faut assigner le r\u00e9sultat \u00e0 une variable pour l'utiliser. Cette m\u00e9thode nous donne toujours un string Si on veut lire autre chose, il faudra le convertir dans le bon type par la suite! string valeurSaisie = \"\"; int valeur = 0; valeurSaisie = Console.ReadLine(); int.TryParse(valeurSaisie, out valeur);","title":"Lecture \u00e0 la console"},{"location":"operateurs/","text":"Op\u00e9rateurs Op\u00e9rateurs math\u00e9matiques Les calculs utilisent les m\u00eame op\u00e9rateurs qu'en math\u00e9matique On assigne le r\u00e9sultat \u00e0 une variable int total; total = 65 + 78 + 22; Les op\u00e9rateurs Addition : + Soustraction : - Multiplication : * (\u00e9toile) Division : / (barre oblique) Reste d'une division : % (ex: 13 % 5 = 3 parce que 13/5 = 2 et reste 3) Les priorit\u00e9s Certains op\u00e9rateurs passent en premier. Par exemple les multiplications se font avant les additions. 1 + 3 * 2 donne 7 parce que 3 * 2 passe avant 1 + 3 Si ce n'\u00e9tait pas d\u00e9fini on ne serait pas s\u00fbr du r\u00e9sultat! Pour sp\u00e9cifier qu'une partie est prioritaire il faut l'entourer avec des parenth\u00e8ses. (1 + 3) * 2 donne 8 parce qu'on force l'addition en premier avec les parenth\u00e8ses. En ordre de priorit\u00e9 : () *, /, % +, - Op\u00e9rateurs de comparaison Pour comparer 2 expression ces op\u00e9rateurs sont disponibles. Ils ont tous la m\u00eame priorit\u00e9 et passe apr\u00e8s tous les op\u00e9rateurs arithm\u00e9tiques \u00c9galit\u00e9 : == Diff\u00e9rent : != Plus petit / grand : < > Plus petit / grand ou \u00e9gal : <= >= Le r\u00e9sultat d'une comparaision donne une valeur logique, soit vrai ou faux. 3 == 4 donne faux 3 <= 4 donne vrai Op\u00e9rateurs logiques Selon les circonstances il sera n\u00e9cessaire de v\u00e9rifier le r\u00e9sultat de plusieurs comparaisons ou valeurs logiques (vrai ou faux). Par exemple : Pour conduire il faut avoir son permis et avoir une auto Au lieu de v\u00e9rifier ces deux conditions une apr\u00e8s l'autre on peut les v\u00e9rifier en m\u00eame temps avec l'op\u00e9rateur logique ET Les op\u00e9rateurs Ils sont plac\u00e9s en ordre de priorit\u00e9! Non (inverse la valeur logique) : ! vrai devient faux ET : && OU : || Exemple d'op\u00e9ration logique ET avec une condition if bool permis = vrai; bool automobile = vrai; bool peutConduire = faux; if(permis && automobile) { Console.Writeline(\"Tu peux conduire!\"); peutConduire = vrai; }","title":"Op\u00e9rateurs"},{"location":"operateurs/#operateurs","text":"","title":"Op\u00e9rateurs"},{"location":"operateurs/#operateurs-mathematiques","text":"Les calculs utilisent les m\u00eame op\u00e9rateurs qu'en math\u00e9matique On assigne le r\u00e9sultat \u00e0 une variable int total; total = 65 + 78 + 22;","title":"Op\u00e9rateurs math\u00e9matiques"},{"location":"operateurs/#les-operateurs","text":"Addition : + Soustraction : - Multiplication : * (\u00e9toile) Division : / (barre oblique) Reste d'une division : % (ex: 13 % 5 = 3 parce que 13/5 = 2 et reste 3)","title":"Les op\u00e9rateurs"},{"location":"operateurs/#les-priorites","text":"Certains op\u00e9rateurs passent en premier. Par exemple les multiplications se font avant les additions. 1 + 3 * 2 donne 7 parce que 3 * 2 passe avant 1 + 3 Si ce n'\u00e9tait pas d\u00e9fini on ne serait pas s\u00fbr du r\u00e9sultat! Pour sp\u00e9cifier qu'une partie est prioritaire il faut l'entourer avec des parenth\u00e8ses. (1 + 3) * 2 donne 8 parce qu'on force l'addition en premier avec les parenth\u00e8ses. En ordre de priorit\u00e9 : () *, /, % +, -","title":"Les priorit\u00e9s"},{"location":"operateurs/#operateurs-de-comparaison","text":"Pour comparer 2 expression ces op\u00e9rateurs sont disponibles. Ils ont tous la m\u00eame priorit\u00e9 et passe apr\u00e8s tous les op\u00e9rateurs arithm\u00e9tiques \u00c9galit\u00e9 : == Diff\u00e9rent : != Plus petit / grand : < > Plus petit / grand ou \u00e9gal : <= >= Le r\u00e9sultat d'une comparaision donne une valeur logique, soit vrai ou faux. 3 == 4 donne faux 3 <= 4 donne vrai","title":"Op\u00e9rateurs de comparaison"},{"location":"operateurs/#operateurs-logiques","text":"Selon les circonstances il sera n\u00e9cessaire de v\u00e9rifier le r\u00e9sultat de plusieurs comparaisons ou valeurs logiques (vrai ou faux). Par exemple : Pour conduire il faut avoir son permis et avoir une auto Au lieu de v\u00e9rifier ces deux conditions une apr\u00e8s l'autre on peut les v\u00e9rifier en m\u00eame temps avec l'op\u00e9rateur logique ET","title":"Op\u00e9rateurs logiques"},{"location":"operateurs/#les-operateurs_1","text":"Ils sont plac\u00e9s en ordre de priorit\u00e9! Non (inverse la valeur logique) : ! vrai devient faux ET : && OU : || Exemple d'op\u00e9ration logique ET avec une condition if bool permis = vrai; bool automobile = vrai; bool peutConduire = faux; if(permis && automobile) { Console.Writeline(\"Tu peux conduire!\"); peutConduire = vrai; }","title":"Les op\u00e9rateurs"},{"location":"si/","text":"Condition La condition est une instruction qui permet de contr\u00f4ler notre programe : Dans un jeu, si le joueur n'a plus de vie le jeu arr\u00eate Si je paie le caissier du Chic-Choco-Latt\u00e9, j'obtiens ma cr\u00e8me glac\u00e9\u00e9 Si le total de mon panier sur amazon.ca d\u00e9passe 75$ je n'ai pas de frais de livraison Le programme qui utilise un condition prend en fait une d\u00e9cision selon les donn\u00e9es L'instruction SI l'instruction SI ... ALORS ... SINON est utili\u00e9e pour la prise de d\u00e9cision SI ma condition est vraie ALORS faire les instructions du bloc 1 SINON faire les instructions du bloc 2 La partie SINON n'est pas obligatoire mais la plupart du temps n\u00e9cessaire pour le bon fonctionnement du programme. La condition doit avoir une valeur VRAI ou FAUX La condition est soit une variable de type bool, une compraison ou une combinaison de plusieurs bool/comparaisons. Syntaxe en C# // Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition est vraie } else { // Instruction si la condition est fausse } // Instructions apr\u00e8s la d\u00e9cision Exemples en C# string choix=\"\"; double prixSushis = 15.97; double total = 0.0; Console.WriteLine(\"Entrer le choix de menu : \"); choix = Console.ReadLine(); if(choix == \"Sushis\") { total = total + prixSushis } Console.WriteLine(\"Total : \" + total + \"$\"); int age = 0; Console.Writeline(\"Quel est votre \u00e2ge? \"); int.TryParse(Console.ReadLine(), out age); if(age > 18) { Console.WriteLine(\"Vous pouvez voter\"); } else { Console.WriteLine(\"Vous ne pouvez pas voter\"); }","title":"Condition"},{"location":"si/#condition","text":"La condition est une instruction qui permet de contr\u00f4ler notre programe : Dans un jeu, si le joueur n'a plus de vie le jeu arr\u00eate Si je paie le caissier du Chic-Choco-Latt\u00e9, j'obtiens ma cr\u00e8me glac\u00e9\u00e9 Si le total de mon panier sur amazon.ca d\u00e9passe 75$ je n'ai pas de frais de livraison Le programme qui utilise un condition prend en fait une d\u00e9cision selon les donn\u00e9es","title":"Condition"},{"location":"si/#linstruction-si","text":"l'instruction SI ... ALORS ... SINON est utili\u00e9e pour la prise de d\u00e9cision SI ma condition est vraie ALORS faire les instructions du bloc 1 SINON faire les instructions du bloc 2 La partie SINON n'est pas obligatoire mais la plupart du temps n\u00e9cessaire pour le bon fonctionnement du programme. La condition doit avoir une valeur VRAI ou FAUX La condition est soit une variable de type bool, une compraison ou une combinaison de plusieurs bool/comparaisons.","title":"L'instruction SI"},{"location":"si/#syntaxe-en-c","text":"// Instructions avant la prise de d\u00e9cision if(condition) { // Instructions si la condition est vraie } else { // Instruction si la condition est fausse } // Instructions apr\u00e8s la d\u00e9cision","title":"Syntaxe en C#"},{"location":"si/#exemples-en-c","text":"string choix=\"\"; double prixSushis = 15.97; double total = 0.0; Console.WriteLine(\"Entrer le choix de menu : \"); choix = Console.ReadLine(); if(choix == \"Sushis\") { total = total + prixSushis } Console.WriteLine(\"Total : \" + total + \"$\"); int age = 0; Console.Writeline(\"Quel est votre \u00e2ge? \"); int.TryParse(Console.ReadLine(), out age); if(age > 18) { Console.WriteLine(\"Vous pouvez voter\"); } else { Console.WriteLine(\"Vous ne pouvez pas voter\"); }","title":"Exemples en C#"},{"location":"variables-types/","text":"Variables et types Variables Les variables associent un espace dans la m\u00e9moire avec un nom. Elles sont utilis\u00e9es pour stocker les donn\u00e9es necessaires \u00e0 la programmation Types Le type d'une variable d\u00e9finit ce qu'elle contient et l'espace qu'elle utilise dans la m\u00e9moire : Un nombre entier : 1 Un nombre r\u00e9el : 2.5 Un caract\u00e8re : a Une phrase (cha\u00eene de caract\u00e8re) : Reste calme et appelle Fred Une valeur vrai ou faux : true Il existe beacuoup d'autres types pour les variables! Types de base en C# int : un entier double : un nombre r\u00e9el char : un caract\u00e8re string : une phrase bool : vrai ou faux Il y a des types plus sp\u00e9cifiques. Il nous permettent d'utiliser plus ou moins de m\u00e9moire selon ce que l'on a l'intention de faire avec la variable. Par exemple : int : un entier entre -2147483648 et 2147483647 prend 32 bit short : un entier entre -32768 et 32767 prend 16 bit Utiliser une variable La d\u00e9clarer : La d\u00e9claration dit \u00e0 notre processeur de lui r\u00e9server un espace dans la m\u00e9moire vive Lui assigner une valeur : L' assignation met une valeur dans la m\u00e9moire Quand on combine la d\u00e9claration et l'assignation on initialise la variable. D\u00e9claration Quand on d\u00e9clare la variable il est obligatoire de d\u00e9terminer son type en premier, puis de lui donner une nom Le nom d'une variable doit \u00eatre significatif . On sait \u00e0 quoi elle sert en lisant le nom. Par exemple : moyenne, total, texteIntro, ... Le nom d'une variable commence par une lettre minuscule Si le nom d'une variable a plus qu'un mot, tous les mots apr\u00e8s le premier mot commencent par une majuscule Quelques exemples de d\u00e9claration : int total; double moyenne; string prenom; Assignation L'assignation se fait avec l'op\u00e9rateur = Il faut que la valeur assign\u00e9e corresponde au type de la vairable Quelques exemples d'assignation ( avec la d\u00e9claration avant ) : string prenom; prenom = \"Jean\" double moyenne; moyenne = 78.23; On ne r\u00e9p\u00e8te pas le type lors de l'assignation Initialisation L'initialisation combine la d\u00e9claration et l'assignation en une seule instruction Il est important d'initialiser les variables pour \u00e9viter la possibilit\u00e9 d'erreur Quand on ne sait pas d'avance quelle valeur assigner, on met une valeur par d\u00e9faut : int : 0 double : 0.0 char : '' string : \"\" bool : true Quelques exemple d'initialisation : int total = 0; double moyenne = 0.0; char code = ''; string prenom = \"\"; bool valide = true;","title":"Variables et types"},{"location":"variables-types/#variables-et-types","text":"","title":"Variables et types"},{"location":"variables-types/#variables","text":"Les variables associent un espace dans la m\u00e9moire avec un nom. Elles sont utilis\u00e9es pour stocker les donn\u00e9es necessaires \u00e0 la programmation","title":"Variables"},{"location":"variables-types/#types","text":"Le type d'une variable d\u00e9finit ce qu'elle contient et l'espace qu'elle utilise dans la m\u00e9moire : Un nombre entier : 1 Un nombre r\u00e9el : 2.5 Un caract\u00e8re : a Une phrase (cha\u00eene de caract\u00e8re) : Reste calme et appelle Fred Une valeur vrai ou faux : true Il existe beacuoup d'autres types pour les variables!","title":"Types"},{"location":"variables-types/#types-de-base-en-c","text":"int : un entier double : un nombre r\u00e9el char : un caract\u00e8re string : une phrase bool : vrai ou faux Il y a des types plus sp\u00e9cifiques. Il nous permettent d'utiliser plus ou moins de m\u00e9moire selon ce que l'on a l'intention de faire avec la variable. Par exemple : int : un entier entre -2147483648 et 2147483647 prend 32 bit short : un entier entre -32768 et 32767 prend 16 bit","title":"Types de base en C#"},{"location":"variables-types/#utiliser-une-variable","text":"La d\u00e9clarer : La d\u00e9claration dit \u00e0 notre processeur de lui r\u00e9server un espace dans la m\u00e9moire vive Lui assigner une valeur : L' assignation met une valeur dans la m\u00e9moire Quand on combine la d\u00e9claration et l'assignation on initialise la variable.","title":"Utiliser une variable"},{"location":"variables-types/#declaration","text":"Quand on d\u00e9clare la variable il est obligatoire de d\u00e9terminer son type en premier, puis de lui donner une nom Le nom d'une variable doit \u00eatre significatif . On sait \u00e0 quoi elle sert en lisant le nom. Par exemple : moyenne, total, texteIntro, ... Le nom d'une variable commence par une lettre minuscule Si le nom d'une variable a plus qu'un mot, tous les mots apr\u00e8s le premier mot commencent par une majuscule Quelques exemples de d\u00e9claration : int total; double moyenne; string prenom;","title":"D\u00e9claration"},{"location":"variables-types/#assignation","text":"L'assignation se fait avec l'op\u00e9rateur = Il faut que la valeur assign\u00e9e corresponde au type de la vairable Quelques exemples d'assignation ( avec la d\u00e9claration avant ) : string prenom; prenom = \"Jean\" double moyenne; moyenne = 78.23; On ne r\u00e9p\u00e8te pas le type lors de l'assignation","title":"Assignation"},{"location":"variables-types/#initialisation","text":"L'initialisation combine la d\u00e9claration et l'assignation en une seule instruction Il est important d'initialiser les variables pour \u00e9viter la possibilit\u00e9 d'erreur Quand on ne sait pas d'avance quelle valeur assigner, on met une valeur par d\u00e9faut : int : 0 double : 0.0 char : '' string : \"\" bool : true Quelques exemple d'initialisation : int total = 0; double moyenne = 0.0; char code = ''; string prenom = \"\"; bool valide = true;","title":"Initialisation"}]}